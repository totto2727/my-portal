//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.5

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "tagged_rule")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub tag: String,
    #[sea_orm(primary_key, auto_increment = false)]
    pub rule: String,
    #[sea_orm(primary_key, auto_increment = false)]
    pub source_platform: String,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::rule::Entity",
        from = "Column::Rule",
        to = "super::rule::Column::Name",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Rule,
    #[sea_orm(
        belongs_to = "super::tag::Entity",
        from = "Column::Tag",
        to = "super::tag::Column::Name",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Tag,
}

impl Related<super::rule::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Rule.def()
    }
}

impl Related<super::tag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tag.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
